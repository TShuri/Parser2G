import json
import time
from selenium import webdriver
from selenium.webdriver import DesiredCapabilities
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager


class AddressParser:
    def __init__(self, file_path, headless=False):
        self.file_path = file_path
        self.headless = headless
        self.driver = self.init_browser()

        self.current_address = None
        self.building_id = None

    def init_browser(self):
        """ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Selenium WebDriver """
        options = webdriver.ChromeOptions()
        options.add_argument("--disable-blink-features=AutomationControlled")
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option("useAutomationExtension", False)
        if self.headless:
            options.add_argument("--headless")

        # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        options.set_capability("goog:loggingPrefs", {"performance": "ALL"})

        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=options)
        driver.maximize_window()
        return driver

    def intercept_network_requests(self):
        """ –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç building_id """
        try:
            logs = self.driver.get_log("performance")
            for entry in logs:
                log_message = json.loads(entry["message"])["message"]
                if log_message["method"] == "Network.responseReceived":
                    request_id = log_message["params"]["requestId"]
                    response_url = log_message["params"]["response"]["url"]

                    if "suggests" in response_url:
                        self.extract_building_id(request_id)

                    if self.building_id and f"byid={self.building_id}" in response_url:
                        self.extract_building_info(request_id)

                    if self.building_id and "organizations/list" in response_url:
                        self.extract_organizations(request_id)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")

    def extract_building_id(self, request_id):
        """ –ò–∑–≤–ª–µ–∫–∞–µ—Ç building_id –∏–∑ –æ—Ç–≤–µ—Ç–∞ API """
        try:
            response = self.driver.execute_cdp_cmd("Network.getResponseBody", {"requestId": request_id})
            data = json.loads(response["body"])
            items = data.get("result", {}).get("items", [])

            for item in items:
                if "address" in item and "building_id" in item["address"]:
                    self.building_id = item["address"]["building_id"]
                    print(f"üè† –ù–∞–π–¥–µ–Ω building_id: {self.building_id}")
                    break

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è building_id: {e}")

    def extract_building_info(self, request_id):
        """ –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–¥–∞–Ω–∏–∏ """
        try:
            response = self.driver.execute_cdp_cmd("Network.getResponseBody", {"requestId": request_id})
            data = json.loads(response["body"])
            items = data.get("result", {}).get("items", [])

            if items:
                print("üè¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–¥–∞–Ω–∏–∏:")
                print(items[0])
                # print(self.extract_data(items[0]))

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–¥–∞–Ω–∏–∏: {e}")

    def extract_organizations(self, request_id):
        """ –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π, –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ –∑–¥–∞–Ω–∏–∏ """
        try:
            response = self.driver.execute_cdp_cmd("Network.getResponseBody", {"requestId": request_id})
            data = json.loads(response["body"])
            organizations = data.get("result", {}).get("items", [])

            if organizations:
                print("üìå –ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ –∑–¥–∞–Ω–∏–∏:")
                for org in organizations:
                    print(f"üìç –ù–∞–∑–≤–∞–Ω–∏–µ: {org.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                    print(f"üïí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {org.get('schedule', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                    print("-" * 30)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: {e}")

    def search_address(self, address):
        """ –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞ –Ω–∞ 2GIS """
        self.current_address = address
        self.building_id = None
        driver = self.driver
        driver.get("https://2gis.ru/irkutsk")

        try:
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—è –≤–≤–æ–¥–∞
            input_box = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, "input._h7eic2")))
            input_box.clear()
            input_box.send_keys(address)
            time.sleep(2)  # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫

            # –ö–ª–∏–∫ –ø–æ –ø–µ—Ä–≤–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–µ
            suggestion = WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.CSS_SELECTOR, "li._1914vup")))
            suggestion.click()
            time.sleep(3)  # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–º–∞

            # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            self.intercept_network_requests()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥—Ä–µ—Å–∞ {address}: {e}")

    def run(self):
        """ –ß–∏—Ç–∞–µ—Ç –∞–¥—Ä–µ—Å–∞ –∏–∑ —Ñ–∞–π–ª–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö """
        try:
            with open(self.file_path, "r", encoding="utf-8") as file:
                addresses = file.read().splitlines()

            for address in addresses:
                if address.strip():
                    print(f"\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {address}")
                    self.search_address(address)
                    time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª {self.file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        finally:
            self.driver.quit()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä


if __name__ == "__main__":
    file_path = "irkutsk_addresses_sorted.txt"
    parser = AddressParser(file_path=file_path, headless=False)
    parser.run()