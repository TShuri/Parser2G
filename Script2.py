import json
import time
import re
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager


class AddressParser:
    def __init__(self, headless=False):
        self.headless = headless
        self.driver = self.init_browser()

    def init_browser(self):
        """ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Selenium WebDriver —Å DevTools """
        options = webdriver.ChromeOptions()
        options.add_argument("--disable-blink-features=AutomationControlled")
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option("useAutomationExtension", False)
        if self.headless:
            options.add_argument("--headless")

        # –í–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        options.set_capability("goog:loggingPrefs", {"performance": "ALL"})

        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=options)
        driver.maximize_window()

        return driver

    def clear_cache_and_cookies(self):
        """ –û—á–∏—â–∞–µ–º –∫–µ—à –∏ –ª–æ–≥–∏ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã """
        try:
            # –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –∏ cookies
            self.driver.execute_cdp_cmd("Network.clearBrowserCache", {})
            self.driver.execute_cdp_cmd("Network.clearBrowserCookies", {})
            print("üßπ –ö—ç—à –∏ –∫—É–∫–∏ –æ—á–∏—â–µ–Ω—ã")

        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞ –∏ –ª–æ–≥–æ–≤: {e}")

    def intercept_network_requests(self, building_id):
        """ –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π byid-–∑–∞–ø—Ä–æ—Å """
        try:
            time.sleep(3)  # –î–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è –∑–∞–ø—Ä–æ—Å–∞–º
            logs = self.driver.get_log("performance")

            target_byid_request = None
            target_request_id = None
            entry_byid = f"byid?id={building_id}"

            for log in logs:
                log_json = json.loads(log["message"])["message"]

                if log_json["method"] == "Network.responseReceived":
                    request_id = log_json["params"]["requestId"]
                    response_url = log_json["params"]["response"]["url"]

                    # –ï—Å–ª–∏ URL —Å–æ–¥–µ—Ä–∂–∏—Ç "byid", —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
                    if entry_byid in response_url:
                        target_byid_request = response_url
                        target_request_id = request_id
                        break

            if target_byid_request and target_request_id:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–π byid-–∑–∞–ø—Ä–æ—Å: {target_byid_request}")

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
                response = self.driver.execute_cdp_cmd("Network.getResponseBody", {"requestId": target_request_id})
                data = json.loads(response["body"])

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                with open("byid_data.json", "w", encoding="utf-8") as f:
                    json.dump(data, f, ensure_ascii=False, indent=4)

                print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ byid_data.json")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç–µ –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")

    def search_address(self, address):
        """ –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞ –Ω–∞ 2GIS """
        self.driver.get("https://2gis.ru/irkutsk")

        try:
            input_box = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "input._h7eic2"))
            )
            input_box.clear()
            input_box.send_keys(address)
            time.sleep(2)  # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫

            suggestion = WebDriverWait(self.driver, 5).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, "li._1914vup"))
            )
            suggestion.click()
            time.sleep(3)  # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ–º–∞

            info_element = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "h2._feoj1g9 a"))
            )
            href = info_element.get_attribute("href")
            match = re.search(r"/geo/(\d+)", href)
            building_id = match.group(1)

            # ‚úÖ –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–π byid
            self.intercept_network_requests(building_id)

            # –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –∏ –∫—É–∫–∏ –ø–µ—Ä–µ–¥
            self.clear_cache_and_cookies()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥—Ä–µ—Å–∞ {address}: {e}")

    def run(self):
        """ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ """
        try:
            address = "—É–ª–∏—Ü–∞ –õ–µ–Ω–∏–Ω–∞, 14"
            print(f"\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {address}")
            self.search_address(address)
            time.sleep(2)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

        finally:
            self.driver.quit()


if __name__ == "__main__":
    parser = AddressParser(headless=False)
    parser.run()
