import datetime
import subprocess

def load_addresses_from_file(filepath):
    """ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ —Å –∞–¥—Ä–µ—Å–∞–º–∏ """
    try:
        with open(filepath, "r", encoding="utf-8") as file:
            out_addresses = file.read().splitlines()
            return out_addresses
    except FileNotFoundError as fe:
        print("‚ùå –û—à–∏–±–∫–∞, —Ñ–∞–π–ª —Å –∞–¥—Ä–µ—Å–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!", fe)

def parse_2gis(addresses, script_path):
    counter = {
        "build": 0,
        "orgs_in_build": 0,
        "parsed_build": 0,
        "parsed_orgs_in_build": 0,
        "saved_build_json": 0,
        "saved_orgs_in_build_json": 0,

        "error_address_processing": 0,
        "error_intercept_network": 0,
        "error_not_found_build_id": 0,

        "start_time": datetime.datetime.now().isoformat(),
        "end_time": 0
    }

    try:
        count_addresses = len(addresses)
        for num, address in enumerate(addresses, start=1):
            print(f"\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {address} ({num}/{count_addresses})")

            # –í—ã–∑–æ–≤ —Å–∫—Ä–∏–ø—Ç–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –∞–¥—Ä–µ—Å–∞
            result = subprocess.run(
                ["python", script_path, address],  # –£–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Å–∫—Ä–∏–ø—Ç–∞
                capture_output=True,
                text=True
            )

            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            print(result.stdout)
            if result.stderr:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞:\n{result.stderr}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞: {e}")


if __name__ == "__main__":
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∞–¥—Ä–µ—Å–∞–º–∏
    # file_addresses = "/data_raw/osm/addresses_districts/–æ–∫—Ç—è–±—Ä—å—Å–∫–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –æ–∫—Ä—É–≥.txt"
    file_addresses = "other/test_addresses.txt"
    addresses = load_addresses_from_file(file_addresses)

    # –ü—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É
    script_path = "parsers/2gis/2gis_parser.py"
    parse_2gis(addresses, script_path)

